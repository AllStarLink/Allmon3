#!/usr/bin/python3
# asl-cmdlink.py - Monitor ASL Asterisk server for events
#
# Copyright(C) 2023 AllStarLink
# Allmon3 and all components are Licensed under the AGPLv3
# see https://raw.githubusercontent.com/AllStarLink/Allmon3/develop/LICENSE
#


import argparse
import base64
import configparser
from itertools import cycle
import logging
import logging.handlers
import os
import re
import signal
import socket
import sys
from time import sleep
import uuid
import zmq

_BUILD_ID = "20230316-00"

# Handle Signals
def sigterm_handler(_signo, _stack_frame):
	log.info("exiting on signal %d", _signo)
	sys.exit(0)	
signal.signal(signal.SIGINT, sigterm_handler)
signal.signal(signal.SIGHUP, sigterm_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

# Creating and connecting to the ASL manager socket

## Use this creator as part of a retry interval
def asl_create_connection_nofail():
	return asl_create_connection(False)

## Use this creator to fail immediately on any
## network-level connect failure
def asl_create_connection_fail():
	return asl_create_connection(True)

## If failhard=True then sys.exit() is called on network-level issues
def asl_create_connection(failhard):
	log.debug("asl_create_connection(failhard=%s)", failhard)
	try:
		nasl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		nasl.settimeout(10)
		log.debug("connect() using %s:%s", ASL_HOST, ASL_PORT)
		nasl.connect((ASL_HOST, ASL_PORT))

		# Check this connected to an Asterisk Call Manager (ACM)
		part = nasl.recv(1024).decode("UTF-8")
		log.debug("AIM version: %s", rern.sub("",part))
		if not re.match("^Asterisk Call Manager", part):
			log.error("Connection to %s:%d does not appear to be an Asterisk Call Manager",
				ASL_HOST, ASL_PORT) 
			nasl.close()
			sys.exit(1)
	
		# Logon to the ACM
		logon = "ACTION: LOGIN\r\nUSERNAME: %s\r\nSECRET: %s\r\nEVENTS: 0\r\n" % ( ASL_USER, ASL_PASS )

		logon_response = asl_cmd_response(nasl, logon)
		log.debug(rern.sub(" ",logon_response))
		lp = re.compile('Response: Success\r\n', re.MULTILINE)
		logon_success = lp.match(logon_response)
		if not logon_success:
			lr = rern.sub("  ", logon_response)
			log.error("Logon failure msg=(%s)", lr)
			nasl.close()
			sys.exit(1)

		log.debug("leaving asl_create_connection()")
		return nasl

	except socket.error as error:
		log.error("connection failed to %s:%s: %s", ASL_HOST, ASL_PORT, error)
		if failhard:
			sys.exit(1)
		else:
			return None
	except TypeError as e:
		log.error("failed connection on connect(): %s", e)

		if failhard:
			sys.exit(1)
		else:	
			return None

# Generic construct for sending ASL Manager commands and reading responses
def asl_cmd_response(s, cmd):
	try:
		aid = uuid.uuid4()
		cmd += "ActionID: %s\r\n\r\n" % aid
		s.settimeout(5)
		if not cmd is None:
			log.debug("command >> %s", rern.sub(" ", cmd))
			s.sendall(str.encode(cmd))
		
		cont_recv = True
		resp = ""
		while cont_recv:		
			part = s.recv(1024)
			if part == b'':
				log.debug("asl_cmd_response() socket went away on the far side")
				raise BrokenPipeError("other side went away")
			resp += part.decode("UTF-8")
			if resp[-4:] == "\r\n\r\n":
				cont_recv = False

		log.debug("response >> %s", rern.sub("  ", resp))
		return resp

	except TimeoutError as e:
		log.error("asl_cmd_response() TimeoutError")
		raise e
	except BrokenPipeError as e:
		log.error("asl_cmd_response() BrokenPipeError")
		raise e
	except socket.timeout as e:
		log.error("asl_cmd_response() socket.timeout")
		raise e
	except Exception as e:
		log.error("asl_cmd_response() Exception: %s", e.__class__)
		log.error("asl_cmd_response() Message: %s", e)
		raise e

# (try) to logout of ASL Manager neatly
def asl_logout(s):	
	try:
		s.sendall(str.encode("ACTION: Logoff\r\n\r\n"))
	except Exception as e:
		log.error(e)

# Wrapper for asl_cmd_response to handle ACTION:COMMAND
def asl_cmd(s, cmdstr):
	log.debug("enter asl_cmd()")
	
	try:
		cmd = "ACTION: COMMAND\r\nCOMMAND: {}\r\n".format(cmdstr)
		c_response = asl_cmd_response(s, cmd)
		if  re.match(r"^Response\:\s+Error\s", c_response):
			output = re.search(r"^.*Output:\s+(.*)\s+\(", c_response, re.MULTILINE)
			return "ERR: {}".format(output.group(1))

		# For Asterisk 20/ASL3 we look for Output: lines
		if  re.match(r"^Response\:\s+Success\s", c_response):
			output = re.split("\r\n", c_response)
			r = "OK:\r\n"
			for l in output:
				if re.match(r"^Output:\s", l):
					output = re.search(r"^Output:\s(.*)$", l)
					log.debug(output.group(1))
					r += output.group(1) + "\r\n"
			return r

		# For Asterisk 1.4/Classic ASL we have to assume the ordering
		# and there's no valid command check
		if  re.match(r"^Response\:\s+Follows\s", c_response):
			output = re.split("\r\n", c_response)
			log.debug(output[3])
			if not re.match(r"No such command", output[3]):
				return "OK:\r\n{}".format(output[3])
			
			return "ERR:\r\n{}".format(output[3])

		return "ERR: command output responded with something I didn't understand"

	except Exception as e:
		log.error("asl_cmd() exception %s", e.__class__)
		log.error("asl_cmd() message %s", e.__class__)
		raise e	

# To prevent casual interception/hacking, the cmd messages
# are xor'd with the node admin key. The messages are base64-encoded.
# Note: this is _not_ cryptographically secure... if you're concerned
# about that you shouldn't be doing whatever it is you're doing
# with this program.
def decrypt_msg(data, key):
	log.debug("entering decrypt_msg")
	log.debug("msg: %s", data)
	data_bytes = data.encode("UTF-8")
	msg_bytes = base64.b64decode(data_bytes)
	msg_x = msg_bytes.decode("UTF-8")
	msg = ''.join(chr(ord(x) ^ ord(y)) for (x,y) in zip(msg_x, cycle(key)))
	log.debug("msg: %s", msg)
	return msg

######## MAIN PROGRAM ########

# node_mon_list
# node_mon_list = { NODE : node_status{} , .... }
node_mon_list = { }

# Helpers
rern = re.compile(r'\r\n', re.MULTILINE)
rens = re.compile(r'\s', re.MULTILINE)

# Tunables
__MAX_MSG_LEN = 256

# Args and Log Setup
ap = argparse.ArgumentParser(description="Connect to an ASL Asterisk server and issue commands")
ap.add_argument("node", type=int, help="Node ID")
ap.add_argument("config", help="path to INI configuration for the node")
ap.add_argument("--debug", help="enable debug-level logging output", action="store_true")
ap.add_argument("--version", help="get the version of the software", action="version",
	version='%(prog)s {}'.format(_BUILD_ID))
args = ap.parse_args()

log = logging.getLogger("asl-cmdlink")
lh = logging.StreamHandler()
lf = logging.Formatter(fmt="%(name)s: %(levelname)s: %(message)s")
lh.setFormatter(lf)
log.addHandler(lh)

if args.debug:
	log.setLevel(logging.DEBUG)
else:
	log.setLevel(logging.INFO)

if not 1000 <= args.node <= 9999999:
	log.error("provided node \"%s\" must be a number between 1000 and 9999999", args.node)
	sys.exit(1)
else:
	log.debug("using node %d", args.node)


# Parse configuration

try:
	if not os.path.exists(args.config):
		raise Exception("file not found: %s" % (args.config))
	log.debug("config file is %s", args.config)
	config = configparser.ConfigParser()
	config.read(args.config)
	log.debug({section: dict(config[section]) for section in config.sections()})

	if str(args.node) not in config:
		raise Exception("No configuration stanza for node %s in %s" % (args.node, args.config))

	if "colocated_on" in config[str(args.node)]:
		raise Exception("Trying to start a process for a colocated node; only the primary node needs an asl-cmdlink")

	if not "ip" in config[str(args.node)]:
		raise Exception("Missing required attribute ip= for %s in %s" % (args.node, args.config))
	ASL_HOST = config[str(args.node)]["ip"]
	log.debug("ASL_HOST - %s", ASL_HOST)

	if not "user" in config[str(args.node)]:
		raise Exception("Missing required attribute user= for %s in %s" % (args.node, args.config))
	ASL_USER = config[str(args.node)]["user"]
	log.debug("ASL_USER - %s", ASL_USER)

	if not "pass" in config[str(args.node)]:
		raise Exception("Missing required attribute pass= for %s in %s" % (args.node, args.config))
	ASL_PASS = config[str(args.node)]["pass"]
	log.debug("ASL_PASS - %s", ASL_PASS)

	if not "port" in config[str(args.node)]:
		log.debug("No port= attribute specified, using default 5038")
		ASL_PORT = 5038
	else:
		ASL_PORT = int(config[str(args.node)]["port"])
		log.debug("ASL_PORT - %s", ASL_PORT)


	if not "retryinterval" in config[str(args.node)]:
		log.info("No retryinterval= attribute specified, using default 15s")
		RETRY_INTERVAL = 15
	else:
		RETRY_INTERVAL = int(config[str(args.node)]["retryinterval"])
		log.debug("RETRY_INTERVAL - %s", RETRY_INTERVAL)

	if not "retrycount" in config[str(args.node)]:
		log.info("No retrycount= attribute specified, using default of infinite retries")
		RETRY_COUNT = -1
	else:
		RETRY_COUNT = int(config[str(args.node)]["retrycount"])
		log.debug("RETRY_COUNT - %s", RETRY_COUNT)

	if not "cmdport" in config[str(args.node)]:
		raise Exception("Missing required attribute cmdport= for %s in %s" % (args.node, args.config))
	ZMQ_PORT = int(config[str(args.node)]["cmdport"])
	log.debug("ZMQ_PORT - %s", ZMQ_PORT)

	if "multinodes" in config[str(args.node)]:
		log.debug("found multinodes")
		for n in re.split(r',', config[str(args.node)]["multinodes"]):
			log.debug("Adding node %d", int(n))
			node_mon_list.update({ int(n): True })
	else:
		node_mon_list.update({ args.node : True })

except Exception as e:
	log.error("INI parser error: %s", e)
	sys.exit(1)

# Create the initial connection to the ASL Manager
asl = asl_create_connection_fail()
log.debug("have original asl object")

# Create the ZeroMQ listener
try:
	log.debug("creating ZMQ listener")
	c_context = zmq.Context()
	cmdqueue = c_context.socket(zmq.REP)
	cmdqueue.bind("tcp://*:%d" % (ZMQ_PORT))
except zmq.error.ZMQError as e:
	log.error("unable to create ZeroMQ listener: %s", e )
	asl_logout(asl)
	asl.close()
	sys.exit(1)

# Execute the main status gathering loop
log.debug("starting the main work loop")
main_loop = True
inner_loop = True
try:
	while main_loop:
		while inner_loop:
			try:
				log.debug("Waiting for a message in ZMQ")
				message_b = cmdqueue.recv()
				message = decrypt_msg(message_b.decode(), ASL_PASS)
				if len(message) > __MAX_MSG_LEN:
					log.error("message > len(%d) was ignored", __MAX_MSG_LEN)
					cmdqueue.send("ERR: cmd > %d chars not permitted", __MAX_MSG_LEN).encode("UTF-8")
					continue

				if not re.match("^(core|iax2|rpt|voter)", message):
					log.error("unsupported command: %s", message)
					cmdqueue.send("ERR: last command not a supported type".encode("UTF-8"))
					continue

				response = asl_cmd(asl, message)
				log.debug("Sending a message in ZMQ")
				cmdqueue.send(response.encode("UTF-8"))

			except BrokenPipeError as e:
				log.error("received BrokenPipeError; trying to reconnect")
				inner_loop = False
			except socket.timeout as e:
				log.error("received socket.timeout; trying to reconnect")
				inner_loop = False

		# If we exited out of inner_loop without throwing an exception
		# then something went wrong with the asl socket. Loop around
		# here trying to reconnect for the timeout interval and then
		# let the main_loop continue
	
		asl.close()
		asl_dead = True
		retry_counter = 0
	
		while asl_dead:
			log.debug("sleeping for RETRY_INTERVAL of %d", RETRY_INTERVAL)
			sleep(RETRY_INTERVAL)
			retry_counter += 1
	
			if RETRY_COUNT == -1 or RETRY_COUNT <= retry_counter:
				log.debug("attempting reconnection retry #%d", retry_counter)
				asl = asl_create_connection_nofail()
				if asl:
					log.info("connection reestablished after %d retries", retry_counter)
					asl_dead = False
			else:
				log.error("count not reestablish connection after %d retries - exiting", retry_counter)
				sys.exit(1)
	
		# re-enable the innter loop processing	
		inner_loop = True

	# return back to the top of main_loop

except Exception as e:
	log.error(e)
	main_loop = False
	raise e

finally:
	log.debug("Clean up on aisle 5")
	asl_logout(asl)
	asl.close()
	cmdqueue.close()

sys.exit(0)
