#!/usr/bin/python3
# almon3.py - Monitor ASL Asterisk server for events
#
# Copyright(C) 2023 AllStarLink
# Allmon3 and all components are Licensed under the AGPLv3
# see https://raw.githubusercontent.com/AllStarLink/Allmon3/develop/LICENSE
#

import argparse
import asyncio
import logging
import logging.handlers
import os
import signal
import sys
from asl import allmon3_ws_status, allmon3_ws_cmd, allmon3_ws_voter
from asl import ami_conn
from asl import node_configs, node_db

_BUILD_ID = "@@HEAD-DEVELOP@@"


# Handle Signals
def sigterm_handler(_signo, _stack_frame):
    log.info("exiting on signal %d", _signo)
    sys.exit(0)    
signal.signal(signal.SIGINT, sigterm_handler)
signal.signal(signal.SIGHUP, sigterm_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

def sigusr1_handler(_signo, _stack_frame):
    log.info("received SIGUSR1; refreshing database")
    try:
        allmon_db.get_allmon_db()
    except Exception as e:
        log.error("unable to get allmondb: %s", e)
        if len(allmon_db.node_database) > 0:
            log.info("info fields will use cached data until an update succeeds")
        else:
            log.error("info fields will be labeled UNAVAILABLE until the data is retrieved")
signal.signal(signal.SIGUSR1, sigusr1_handler)
    

## Startup coroutines
async def start_tasks():
    log.debug("enter start_tasks()")
    ami_connections = set()
    tasks = []

    try:
        for n, c in node_configuration.nodes.items():
            log.debug(f"starting status ws {n}@{c.host} on port {c.monport}")
            ami = ami_conn.AMI(c.host, c.port, c.user, c.password)
            ami_connections.add(ami)
            status_ws =  allmon3_ws_status.NodeStatusWS(n, c, allmon_db, ami)
            tasks.append(asyncio.create_task(status_ws.main()))

            log.debug(f"starting command ws {n}@{c.host} on port {c.monport}")
            node_ws = allmon3_ws_cmd.NodeCmdWS(n, c)
            tasks.append(asyncio.create_task(node_ws.main()))

            if c.vmonport > 0:
                log.debug(f"starting voter ws {n}@{c.host} on port {c.vmonport}")
                ami = ami_conn.AMI(c.host, c.port, c.user, c.password)
                ami_connections.add(ami)
                voter_ws =  allmon3_ws_voter.NodeVoterWS(n, c, ami)
                tasks.append(asyncio.create_task(voter_ws.main()))

        await asyncio.gather(*tasks)

    except Exception as e:
        log.debug("exception of start_tasks()")
        raise e

    finally:
        log.debug("finally of start_tasks()")
        for conn in ami_connections:
            log.info("closing an AMI connection: %s", conn.ami_host)
            conn.close()

######## MAIN PROGRAM ########

# Args and Log Setup
ap = argparse.ArgumentParser(description="Connect to an ASL Asterisk server and print rpt stats")
ap.add_argument("--nodes", type=str, help="Only start the node(s) listed as --node NODE[,NODE,...]")
ap.add_argument("--config", help="path to INI configuration for the node")
ap.add_argument("--debug", help="enable debug-level logging output", action="store_true")
ap.add_argument("--version", help="get the version of the software", action="version", version='%(prog)s {}'.format(_BUILD_ID))
args = ap.parse_args()

log = logging.getLogger("allmon3")
lh = logging.StreamHandler()
lf = logging.Formatter(fmt="%(levelname)s: (%(name)s) %(message)s")
lh.setFormatter(lf)
log.addHandler(lh)

mlog = logging.getLogger("asl")
mlog.addHandler(lh)
mlog.setLevel(logging.DEBUG)

if args.debug:
    log.setLevel(logging.DEBUG)
    mlog.setLevel(logging.DEBUG)
else:
    log.setLevel(logging.INFO)
    mlog.setLevel(logging.INFO)

if args.config:
    config_file = args.config
else:
    config_file = "/etc/allmon3/allmon3.ini"

try:
    # Config Parse
    if not os.path.exists(config_file):
        raise Exception("file not found: %s" % (config_file))
    log.debug("config file is %s", config_file)

    if args.nodes:
        filter_list = args.nodes.split(",")
    else:
        filter_list = None

<<<<<<< HEAD
    node_configuration = node_configs.NodeConfigs(config_file, filter_list)
    
    # Get Database
    allmon_db = node_db.ASLNodeDB()
    for n, c in node_configuration.nodes.items():
        allmon_db.set_my_info(c)
=======
    if not "pollinterval" in config[str(args.node)]:
        log.info("No pollinterval= attribute specified, using default 1")
        POLLING_TIMER = 1
    else:
        POLLING_TIMER = float(config[str(args.node)]["pollinterval"])
        log.debug("POLLING_TIMER: %d", POLLING_TIMER)

    if not "vpollinterval" in config[str(args.node)]:
        log.info("No vpollinterval= attribute specified, using default 1")
        VOTER_POLLING_TIMER = 1
    else:
        VOTER_POLLING_TIMER = float(config[str(args.node)]["vpollinterval"])
        log.debug("POLLING_TIMER: %d", VOTER_POLLING_TIMER)

    if not "retryinterval" in config[str(args.node)]:
        log.info("No retryinterval= attribute specified, using default 15s")
        RETRY_INTERVAL = 15
    else:
        RETRY_INTERVAL = int(config[str(args.node)]["retryinterval"])
        log.debug("RETRY_INTERVAL - %s", RETRY_INTERVAL)

    if not "retrycount" in config[str(args.node)]:
        log.info("No retrycount= attribute specified, using default of infinite retries")
        RETRY_COUNT = -1
    else:
        RETRY_COUNT = int(config[str(args.node)]["retrycount"])
        log.debug("RETRY_COUNT - %s", RETRY_COUNT)

    if not "cmdport" in config[str(args.node)]:
        raise Exception("Missing required attribute cmdport= for %s in %s" % (args.node, config_file))
    CMD_WS_PORT = int(config[str(args.node)]["cmdport"])
    log.debug("CMD_WS_PORT - %s", CMD_WS_PORT)

    if not "monport" in config[str(args.node)]:
        raise Exception("Missing required attribute monport= for %s in %s" % (args.node, config_file))
    BCAST_WS_PORT = int(config[str(args.node)]["monport"])
    log.debug("BCAST_WS_PORT - %s", BCAST_WS_PORT)

    if "vmonport" in config[str(args.node)]:
        VOTER_WS_PORT = int(config[str(args.node)]["vmonport"])
        log.debug("VOTER_WS_PORT - %s", VOTER_WS_PORT)
    else:
        VOTER_WS_PORT = -1
        log.info("no vmonport specified - disabling votermon")

    if "votertitle" in config[str(args.node)]:
        VOTER_TITLE = config[str(args.node)]["vmonport"]
    else:
        VOTER_TITLE = "{ASL_NODE} Voter"

    if "multinodes" in config[str(args.node)]:
        log.debug("found multinodes")
        for mn in re.split(r',', config[str(args.node)]["multinodes"]):
            log.debug("Adding node %d", int(mn))
            node_mon_list.update({ int(mn): {
                "ME" : int(mn) , "DESC" : None , "RXKEYED" : False, "TXKEYED" : False ,
                "TXEKEYED" : False, "CONNKEYED" : False, "CONNKEYEDNODE" : None , "CONNS" : None }})
    else:
        node_mon_list.update({ args.node : { 
                "ME" : args.node , "DESC" : None , "RXKEYED" : False, "TXKEYED" : False ,
                "TXEKEYED" : False, "CONNKEYED" : False, "CONNKEYEDNODE" : None , "CONNS" : None }})
>>>>>>> 81cb97c61d61540d474d4f7aaa3d63c899b919b1

except node_configs.ASLNodeConfigException as e:
    log.error(e)
    sys.exit(1)

except Exception as e:
    raise e

# Execute the main status gathering loop
log.debug("starting the main work loop")
try:
    asyncio.run(start_tasks())

finally:
    log.debug("__main__ finally")

sys.exit(0)
