#!/usr/bin/python3
# almon3.py - Monitor ASL Asterisk server for events
#
# Copyright(C) 2023 AllStarLink
# Allmon3 and all components are Licensed under the AGPLv3
# see https://raw.githubusercontent.com/AllStarLink/Allmon3/develop/LICENSE
#

import argparse
import asyncio
import configparser
import logging
import logging.handlers
import os
import pprint
import signal
import sys
from asl_allmon import allmon3_server, allmon3_ws_status, allmon3_ws_cmd, allmon3_ws_voter
from asl_allmon import ami_conn
from asl_allmon import node_configs, node_db, web_configs

_BUILD_ID = "@@HEAD-DEVELOP@@"


# Handle Signals
def sigterm_handler(_signo, _stack_frame):
    log.info("exiting on signal %d", _signo)
    sys.exit(0)    
signal.signal(signal.SIGINT, sigterm_handler)
signal.signal(signal.SIGHUP, sigterm_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

def sigusr1_handler(_signo, _stack_frame):
    log.info("received SIGUSR1; refreshing database")
    try:
        allmon_db.get_allmon_db()
    except Exception as e:
        log.error("unable to get allmondb: %s", e)
        if len(allmon_db.node_database) > 0:
            log.info("info fields will use cached data until an update succeeds")
        else:
            log.error("info fields will be labeled UNAVAILABLE until the data is retrieved")
signal.signal(signal.SIGUSR1, sigusr1_handler)
    

## Startup coroutines
async def start_tasks():
    log.debug("enter start_tasks()")
    ami_connections = set()
    tasks = []
    
    try:
        for n, c in node_configuration.nodes.items():
            c.monport = web_configuration.ws_port_start + len(tasks)
            log.info("starting status ws %s@%s on port %s", n, c.host, c.monport)
            ami = ami_conn.AMI(c.host, c.port, c.user, c.password)
            ami_connections.add(ami)
            status_ws =  allmon3_ws_status.NodeStatusWS(n, c, allmon_db, ami)
            tasks.append(asyncio.create_task(status_ws.main()))

            c.cmdport = web_configuration.ws_port_start + len(tasks)
            log.info("starting cmd ws %s@%s on port %s", n, c.host, c.cmdport)
            node_ws = allmon3_ws_cmd.NodeCmdWS(n, c)
            tasks.append(asyncio.create_task(node_ws.main()))

            if c.voter:
                c.vmonport = web_configuration.ws_port_start + len(tasks)
                log.info("starting voter ws %s@%s on port %s", n, c.host, c.vmonport)
                ami = ami_conn.AMI(c.host, c.port, c.user, c.password)
                ami_connections.add(ami)
                voter_ws =  allmon3_ws_voter.NodeVoterWS(n, c, ami)
                tasks.append(asyncio.create_task(voter_ws.main()))

        log.info("starting allmon3 master ws on port %s", web_configuration.http_port)
        a3server = allmon3_server.ServerWS(web_configuration, node_configuration)
        tasks.append(asyncio.create_task(a3server.main()))

        await asyncio.gather(*tasks)
    
    except asyncio.exceptions.CancelledError as e:
        log.debug("ending asyncio tasks")
        for t in tasks:
            t.cancel()

    except Exception as e:
        log.debug("exception of start_tasks()")
        raise e

    finally:
        log.debug("finally of start_tasks()")
        for t in tasks:
            t.cancel()

        for conn in ami_connections:
            log.info("closing an AMI connection: %s", conn.ami_host)
            conn.close()

######## MAIN PROGRAM ########

# Args and Log Setup
ap = argparse.ArgumentParser(description="Connect to an ASL Asterisk server and print rpt stats")
ap.add_argument("--nodes", type=str, help="Only start the node(s) listed as --node NODE[,NODE,...]")
ap.add_argument("--config", help="path to INI configuration allmon3 nodes (default /etc/allmon3/allmon3.ini)")
ap.add_argument("--webconfig", help="path to INI configuration for web services (default /etc/allmon3/web.ini")
ap.add_argument("--menuconfig", help="path to INI configuration for menus (default /etc/allmon3/menu.ini")
ap.add_argument("--debug", help="enable debug-level logging output", action="store_true")
ap.add_argument("--version", help="get the version of the software", action="version", version='%(prog)s {}'.format(_BUILD_ID))
args = ap.parse_args()

log = logging.getLogger("allmon3")
lh = logging.StreamHandler()
lf = logging.Formatter(fmt="%(levelname)s: (%(name)s) %(message)s")
lh.setFormatter(lf)
log.addHandler(lh)

mlog = logging.getLogger("asl")
mlog.addHandler(lh)
mlog.setLevel(logging.DEBUG)

if args.debug:
    log.setLevel(logging.DEBUG)
    mlog.setLevel(logging.DEBUG)
else:
    log.setLevel(logging.INFO)
    mlog.setLevel(logging.INFO)

if args.config:
    config_file = args.config
else:
    config_file = "/etc/allmon3/allmon3.ini"

if args.webconfig:
    web_config_file = args.web_config
else:
    web_config_file = "/etc/allmon3/web.ini"

if args.menuconfig:
    menu_config_file = args.menuconfig
else:
    menu_config_file = "/etc/allmon3/menu.ini"

try:
    # Config Parse
    if not os.path.exists(config_file):
        raise Exception("file not found: %s" % (config_file))
    log.debug("config file is %s", config_file)

    if args.nodes:
        filter_list = args.nodes.split(",")
    else:
        filter_list = None

    node_configuration = node_configs.NodeConfigs(config_file, filter_list)    

    if not os.path.exists(web_config_file):
        raise Exception("file not found: %s" % (web_config_file))
    log.debug("web config file is %s", web_config_file)
    web_configuration = web_configs.WebConfigs(web_config_file)

    if not os.path.exists(menu_config_file):
        log.info("no %s found; no menu data available")
    else:
        menu_ini = configparser.ConfigParser()
        menu_ini.read(menu_config_file)
        for m in menu_ini:
            if m != "DEFAULT":
                web_configuration.menu.update({ m : dict(menu_ini[m]) })

    # Get Database
    allmon_db = node_db.ASLNodeDB()
    for n, c in node_configuration.nodes.items():
        allmon_db.set_my_info(c)

except node_configs.ASLNodeConfigException as e:
    log.error(e)
    sys.exit(1)

except Exception as e:
    raise e

# Execute the main status gathering loop
log.debug("starting the main work loop")
try:
    asyncio.run(start_tasks())

finally:
    log.debug("__main__ finally")

sys.exit(0)
