#!/usr/bin/python3
#
# Copyright(C) 2023-2024 AllStarLink
# Allmon3 and all components are Licensed under the AGPLv3
# see https://raw.githubusercontent.com/AllStarLink/Allmon3/develop/LICENSE

#

import argparse
import asyncio
import base64
from itertools import cycle
import re
import signal
import sys
import websockets

def sigterm_handler(_signo, _stack_frame):
    print("exiting on signal %d" % (_signo))
    sys.exit(0)
signal.signal(signal.SIGINT, sigterm_handler)
signal.signal(signal.SIGHUP, sigterm_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

def crypt_msg(msg, key):
    msg_x = ''.join(chr(ord(x) ^ ord(y)) for (x,y) in zip(msg, cycle(key)))
    msg_x_b = msg_x.encode("UTF-8")
    return base64.b64encode(msg_x_b)

ap = argparse.ArgumentParser(
    description="Simple client to see that an allmon3 instance reseponds "
    "to commands to  the specified WS port")
ap.add_argument("host", type=str, help="FQDN or IP address of the allmon3 to test")
ap.add_argument("port", type=int, help="WS port of allmon3 to test")
args = ap.parse_args()

async def main():
    try:
        url = f"ws://{args.host}:{args.port}"
        print("Creating websoocket connection to {}".format(url))
        async with websockets.connect(url, ping_timeout=None) as websocket:
            async for message in websocket:
                print(message)
    
    except Exception as e:
        print("Error: {}".format(e))
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
