#!/usr/bin/python3
# asl-statmon.py - Monitor ASL Asterisk server for events
#

import argparse
import configparser
import datetime
import json
import logging
import logging.handlers
import os
import pprint
import re
import select
import signal
import socket
import sys
from time import sleep
import time
import urllib.request
import uuid
import zmq

# Handle Signals
def sigterm_handler(_signo, _stack_frame):
	log.info("exiting on signal %d" % (_signo))
	sys.exit(0)	
signal.signal(signal.SIGINT, sigterm_handler)
signal.signal(signal.SIGHUP, sigterm_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

def sigusr1_handler(_signo, _stack_frame):
	log.info("received SIGUSR1; refreshing database")
	try:
		getAllmonDB()
	except Exception as e:
		log.error("unable to get allmondb: %s" % (e) )
		if len(NodeDB) > 0:
			log.info("info fields will use cached data until an update succeeds")
		else:
			log.error("info fields will be labeled UNAVAILABLE until the data is retrieved")
signal.signal(signal.SIGUSR1, sigusr1_handler)
	

# Creating and connecting to the ASL manager socket

## Use this creator as part of a retry interval
def ASLCreateConnectionNoFail():
	return ASLCreateConnection(False)

## Use this creator to fail immediately on any
## network-level connect failure
def ASLCreateConnectionFail():
	return ASLCreateConnection(True)

## If failhard=True then sys.exit() is called on network-level issues
def ASLCreateConnection(failhard):
	log.debug("ASLCreateConnection(failhard=%s)" % (failhard))
	try:
		asl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		asl.settimeout(10)
		log.debug("connect() using %s:%s" % (ASL_HOST, ASL_PORT))
		asl.connect((ASL_HOST, ASL_PORT))

		# Check this connected to an Asterisk Call Manager (ACM)
		cont_recv = True
		resp = ""
		part = asl.recv(1024).decode("UTF-8")
		log.debug("AIM version: %s" % (rern.sub("",part)))
		if not re.match("^Asterisk Call Manager", part):
			log.error("Connection to %s:%d does not appear to be an Asterisk Call Manager" % ( ASL_HOST, ASL_PORT) )
			asl.close()
			sys.exit(1)
	
		# Logon to the ACM
		aid = uuid.uuid4()
		logon = "ACTION: LOGIN\r\nUSERNAME: %s\r\nSECRET: %s\r\nEVENTS: 0\r\n" % ( ASL_USER, ASL_PASS )

		logon_response = ASLCmdResponse(asl, logon)
		log.debug(rern.sub(" ",logon_response))
		lp = re.compile('Response: Success\r\n', re.MULTILINE)
		logon_success = lp.match(logon_response)
		if not logon_success:
			lr = rern.sub("  ", logon_response)
			log.error("Logon failure msg=(%s)" % lr)
			asl.close()
			sys.exit(1)

		log.debug("leaving ASLCreateConnection()")
		return asl

	except socket.error as error:
		log.error("connection failed to %s:%s: %s" % (ASL_HOST, ASL_PORT, error))
		if failhard:
			sys.exit(1)
		else:
			return None
	except TypeError as e:
		log.error("failed connection on connect(): %s" % (e))
		if failhard:
			sys.exit(1)
		else:	
			return None


# Generic construct for sending ASL Manager commands and reading responses
def ASLCmdResponse(s, cmd):
	try:
		aid = uuid.uuid4()
		cmd += "ActionID: %s\r\n\r\n" % aid
		s.settimeout(5)
		if not cmd is None:
			log.debug("command >> %s" % rern.sub(" ", cmd))
			s.sendall(str.encode(cmd))
		
		cont_recv = True
		resp = ""
		while cont_recv:		
			part = s.recv(1024)
			if part == b'':
				log.debug("ASLCmdResponse() socket went away on the far side")
				raise BrokenPipeError("other side went away")
			resp += part.decode("UTF-8")
			if resp[-4:] == "\r\n\r\n":
				cont_recv = False

		log.debug("response >> %s" % rern.sub("  ", resp))
		return resp

	except TimeoutError as e:
		log.debug("ASLCmdResponse() TimeoutError")
        log.error("socket error: %s" % e)
		raise e
	except BrokenPipeError as e:
		log.debug("ASLCmdResponse() BrokenPipeError")
		raise e
	except Exception as e:
		log.debug("ASLCmdResponse() Exception: %s" % (e.__class__))
		log.error(e)
		return None

# (try) to logout of ASL Manager neatly
def ASLLogout(s):	
	try:
		s.sendall(str.encode("ACTION: Logoff\r\n\r\n"))
	except Exception as e:
		log.error(e)
	return None

# Parse the (String) response from a SawStat command
def parseSawStat(response):
	log.debug("parseSawStat()")
	ra = re.split(r'[\n\r]+', response)
	for l in ra:
		if re.match("^Conn", l):
			ce = re.split(r"\s+", l)
			# Conn: NODE PTT SEC_SINCE_KEY SEC_SINCE_UNKEY
			NodeConns[ce[1]].update( { "PTT" : ce[2] , "SSK" : ce[3] , "SSU" : ce[4] } )				

# Parse the (String) response from XStat command
def parseXStat(response):
	log.debug("parseXStat()")
	ra = re.split(r'[\n\r]+', response)
	conn_count = 0
	for l in ra:
		if re.match("^Conn", l):
			ce = re.split(r"\s+", l)
			# Conn: NODE IP ?? DIRECETION CONNTIME CONNSTATE
			NodeConns.update( { ce[1] : {} } )
			NodeConns[ce[1]].update( { "IP" : ce[2] , "DIR" : ce[4] , "CTIME" : ce[5] ,
				"CSTATE" : ce[6] , "MODE" : "Initializing" } )
			conn_count += 1
		elif re.match("^Var:\sRPT_ALINKS=", l) and not re.match("^Var:\sRPT_ALINKS=0", l):
			ns = re.search('ALINKS=[0-9]+,([0-9]+)([A-Z])', l)
			if ns.group(2) == "T":
				NodeConns[ns.group(1)].update( { "MODE" : "Transceive" } )
			elif ns.group(2) == "R":
				NodeConns[ns.group(1)].update( { "MODE" : "Monitor" } )
			else:
				NodeConns[ns.group(1)].update( { "MODE" : "Unknown" } )
		elif re.match("^Var:\sRPT_TXKEYED=1", l):
			NodeStatus.update( { "TXKEYED" : True } )
		elif re.match("^Var:\sRPT_TXEKEYED=1", l):
			NodeStatus.update( { "TXEKEYED" : True } )
		elif re.match("^Var:\sRPT_RXKEYED=1", l):
			NodeStatus.update( { "RXKEYED" : True } )
		elif re.match("^Var:\sRPT_TXKEYED=0", l):
			NodeStatus.update( { "TXKEYED" : False } )
		elif re.match("^Var:\sRPT_TXEKEYED=0", l):
			NodeStatus.update( { "TXEKEYED" : False } )
		elif re.match("^Var:\sRPT_RXKEYED=0", l):
			NodeStatus.update( { "RXKEYED" : False } )

	if conn_count == 0:
		log.debug("no nodes connected")
		NodeConns.clear()

def genNodeJSONStatus():
	log.debug("genNodeJSONStatus()")
	
	d = NodeStatus
	d["Conns"] = NodeConns
	pp = pprint.PrettyPrinter(indent=4)
	print(json.dumps(d))

# Generate the connections HTML table
def genNodeHTMLTable():
	log.debug("genNodeHTMLTable()")
	t = ""
	
	if ASL_NODE in NodeData:
		t += "<div class=\"nodelabel\">Node {} - {} {} {}</div>".format(
			ASL_NODE, NodeData[ASL_NODE]['CALL'], NodeData[ASL_NODE]['DESC'], NodeData[ASL_NODE]['LOC'])
	else:
		t += "<div class=\"nodelabel\">Node {}</div>".format(ASL_NODE)

	if NodeStatus['TXKEYED'] and not NodeStatus['TXEKEYED'] and NodeStatus['RXKEYED']:
		log.debug("transmitting locally-received signal")
		t += "<div class=\"nodetxactlocal\">Transmit Locally Received Signal</div>"
	elif NodeStatus['TXKEYED'] and not NodeStatus['TXEKEYED'] and not NodeStatus['RXKEYED']:
		log.debug("transmitting network-received signal")
		t += "<div class=\"nodetxactremote\">Transmit Network Received Signal</div>"
	else:
		log.debug("transmitter is idle")
		t += "<div class=\"nodetxidle\">Transmit Idle</div>"

	t += "<table class=\"table\">"
	t += "<thead><tr><th>Node</th><th>Description</th><th>Connected Time</th><th>Last Received</th><th>Direction</th><th>Connect State</th><th>Mode</th></tr></thead><tbody>"
	for n in NodeConns:
		if int(NodeConns[n]['SSK']) == -1:
			last_xmit = "Never"
		else:
			last_xmit = str(datetime.timedelta(seconds=int(NodeConns[n]['SSK'])))

		if n in NodeData:
			description = "{0} {1} {2}".format(NodeData[n]['CALL'], NodeData[n]['DESC'], NodeData[n]['LOC'])
		else:
			description = "AllmonDB Unavailable"

		t += "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" % (
			n, description , NodeConns[n]['CTIME'], last_xmit,
			NodeConns[n]['DIR'], NodeConns[n]['CSTATE'], NodeConns[n]['MODE']  )
	t += "</tbody></table>"
	return t

# Read and load in the ASL Database
def getAllmonDB():
	log.debug("getAllmonDB()")
	try:
		url = "http://allmondb.allstarlink.org/"
		req = urllib.request.Request(url, data=None, headers={ "User-Agent" : "Mozilla/5.0" })
		log.info("Retrieving database from %s" % (url))
		start_time = time.time()
		with urllib.request.urlopen(req) as response:
			dbf = response.read().decode("UTF-8")
	except Exception as e:
		raise e
	nodedb = re.split(r"\n", dbf)
	for n in nodedb:
		r = re.split(r"\|", n)
		if len(r) == 4:
			NodeData.update( { r[0] : {} } )
			NodeData[r[0]].update( { "CALL" : r[1] , "DESC" : r[2] , "LOC" : r[3] } )
	elapsed_time = time.time() - start_time
	log.info("Updated node database in {0:.2f} seconds".format(elapsed_time))

######## MAIN PROGRAM ########

# Connections dictonary table

#Node Conns = {
#	NODE : {
#		IP : str			(ip adderss)
#		DIR : str			(direction of link)
#		CTIME: str			(connection time)
#		CSTATE:	str			(connection state)
#		PTT : TRUE|FALSE	(current PTT state)
#		SSK : int			(sec since key)
#		SSU : int			(sec since unkey)
#		MODE : str			(mode)
#	}
#
#	NODE : { ... }
#
#	...
#}
NodeConns = { }

# Node database
#
# NodeData = { NODE : { CALL : str , DESC : str , LOC : str } , ... }
NodeData = { } 

# Node Status
#
# NodeStatus = { RXKEYED : bool , TXKEYED : bool, TXEKEYED }
NodeStatus = { "RXKEYED" : False , "TXKEYED" : False , "TXEKEYED" : False }

# Helpers
rern = re.compile('\r\n', re.MULTILINE)

# Args and Log Setup
ap = argparse.ArgumentParser(description="Connect to an ASL Asterisk server and print rpt stats")
ap.add_argument("node", type=int, help="Node ID")
ap.add_argument("config", help="path to INI configuration for the node")
ap.add_argument("--debug", help="enable debug-level logging output", action="store_true")
args = ap.parse_args()

log = logging.getLogger("asl-statmon")
lh = logging.StreamHandler()
lf = logging.Formatter(fmt="%(name)s: %(levelname)s: %(message)s")
lh.setFormatter(lf)
log.addHandler(lh)

if args.debug:
	log.setLevel(logging.DEBUG)
else:
	log.setLevel(logging.INFO)

if not 1000 <= args.node <= 9999999:
	log.error("provided node \"%s\" must be a number between 1000 and 9999999" % (args.node))
	sys.exit(1)
else:
	log.debug("using node %d" % (args.node))
	ASL_NODE = args.node

# Parse configuration

try:
	if not os.path.exists(args.config):
		raise Exception("file not found: %s" % (args.config))
	log.debug("config file is %s" % (args.config))
	config = configparser.ConfigParser()
	config.read(args.config)
	log.debug({section: dict(config[section]) for section in config.sections()})

	if not str(args.node) in config:
		raise Exception("No configuration stanza for node %s in %s" % (args.node, args.config))

	if not "ip" in config[str(args.node)]:
		raise Exception("Missing required attribute ip= for %s in %s" % (args.node, args.config))
	else:
		ASL_HOST = config[str(args.node)]["ip"]
		log.debug("ASL_HOST - %s" % (ASL_HOST))

	if not "user" in config[str(args.node)]:
		raise Exception("Missing required attribute user= for %s in %s" % (args.node, args.config))
	else:
		ASL_USER = config[str(args.node)]["user"]
		log.debug("ASL_USER - %s" % (ASL_USER))

	if not "pass" in config[str(args.node)]:
		raise Exception("Missing required attribute pass= for %s in %s" % (args.node, args.config))
	else:
		ASL_PASS = config[str(args.node)]["pass"]
		log.debug("ASL_PASS - %s" % (ASL_PASS))

	if not "port" in config[str(args.node)]:
		log.debug("No port= attribute specified, using default 5038")
		ASL_PORT = 5038
	else:
		ASL_PORT = int(config[str(args.node)]["port"])
		log.debug("ASL_PORT - %s" % (ASL_PORT))

	if not "pollinterval" in config[str(args.node)]:
		log.info("No pollinterval= attribute specified, using default 1")
		POLLING_TIMER = 1
	else:
		POLLING_TIMER = int(config[str(args.node)]["pollinterval"])
		log.debug("POLLING_TIMER - %s" % (POLLING_TIMER))

	if not "retryinterval" in config[str(args.node)]:
		log.info("No retryinterval= attribute specified, using default 15s")
		RETRY_INTERVAL = 15
	else:
		RETRY_INTERVAL = int(config[str(args.node)]["retryinterval"])
		log.debug("RETRY_INTERVAL - %s" % (RETRY_INTERVAL))

	if not "retrycount" in config[str(args.node)]:
		log.info("No retrycount= attribute specified, using default of infinite retries")
		RETRY_COUNT = -1
	else:
		RETRY_COUNT = int(config[str(args.node)]["retrycount"])
		log.debug("RETRY_COUNT - %s" % (RETRY_COUNT))

	if not "monport" in config[str(args.node)]:
		raise Exception("Missing required attribute monport= for %s in %s" % (args.node, args.config))
	else:
		ZMQ_PORT = int(config[str(args.node)]["monport"])
		log.debug("ZMQ_PORT - %s" % (ZMQ_PORT))

except Exception as e:
	log.error("INI parser error: %s" % (e));
	sys.exit(1)

# Create the initial connection to the ASL Manager
asl = ASLCreateConnectionFail()
log.debug("have original asl object")

# Create the ZeroMQ listener
try:
	log.debug("creating ZMQ listener")
	p_context = zmq.Context()
	publisher = p_context.socket(zmq.PUB)
	publisher.bind("tcp://*:%d" % (ZMQ_PORT))
except zmq.error.ZMQError as e:
	log.error("unable to create ZeroMQ listener: %s" % ( e ))
	ASLLogout(asl)
	asl.close()
	sys.exit(1)

# Load the allmon database
try:
	getAllmonDB()
except Exception as e:
	log.error("unable to get allmondb: %s" % (e) )
	log.error("info fields will be labeled UNAVAILABLE until the data is retrieve")

# Execute the main status gathering loop
log.debug("starting the main work loop")
main_loop = True
inner_loop = True
last_db_update = time.time()
xstat_cmd = "ACTION: RptStatus\r\nCOMMAND: XStat\r\nNODE: %d\r\n" % ( ASL_NODE )
sawstat_cmd = "ACTION: RptStatus\r\nCOMMAND: SawStat\r\nNODE: %d\r\n" % ( ASL_NODE )
try:
	while main_loop:
		while inner_loop:
			try:
	
				xstat = ASLCmdResponse(asl, xstat_cmd)
				parseXStat(xstat)
				sawstat = ASLCmdResponse(asl, sawstat_cmd)
				parseSawStat(sawstat)
				#publisher.send_string(genNodeHTMLTable())
				genNodeJSONStatus()
	
			except BrokenPipeError as e:
				log.error("received BrokenPipeError; trying to reconnect")
				inner_loop = False

			# Check and execute a database update if needed
			try:
				if ( time.time() - last_db_update ) > 3600:
					getAllmonDB()
					last_db_update = time.time()
			except Exception as e:
				log.error("unable to get allmondb: %s" % (e) )
				if len(NodeDB) > 0:
					log.info("info fields will use cached data until an update succeeds")
				else:
					log.error("info fields will be labeled UNAVAILABLE until the data is retrieved")

			# Sleep for the polling time		
			sleep(POLLING_TIMER)
	
		# If we exited out of inner_loop without throwing an exception
		# then something went wrong with the asl socket. Loop around
		# here trying to reconnect for the timeout interval and then
		# let the main_loop continue
	
		asl.close()
		asl_dead = True
		retry_counter = 0
	
		while asl_dead:
			log.debug("sleeping for RETRY_INTERVAL of %d" % (RETRY_INTERVAL))
			sleep(RETRY_INTERVAL)
			retry_counter += 1
	
			if RETRY_COUNT == -1 or RETRY_COUNT <= retry_counter:
				log.debug("attempting reconnection retry #%d" % (retry_counter))
				asl = ASLCreateConnectionNoFail()
				if asl:
					log.info("connection reestablished after %d retries" % (retry_counter))
					asl_dead = False
			else:
				log.error("count not reestablish connection after %d retries - exiting" % (retry_counter))
				sys.exit(1)
	
		# re-enable the innter loop processing	
		inner_loop = True

	# return back to the top of main_loop

except Exception as e:
	log.error(e)
	main_loop = False
	raise e
	sys.exit(1)

finally:
	log.debug("Clean up on aisle 5")
	ASLLogout(asl)
	asl.close()
	publisher.close()

sys.exit(0)

