#!/usr/bin/python3
# asl-statmon.py - Monitor ASL Asterisk server for events
#
# Copyright(C) 2023 AllStarLink
# Allmon3 and all components are Licensed under the AGPLv3
# see https://raw.githubusercontent.com/AllStarLink/Allmon3/develop/LICENSE
#

import argparse
import configparser
import json
import logging
import logging.handlers
import os
import re
import signal
import socket
import sys
from time import sleep
import time
import urllib.request
import uuid
import zmq

_BUILD_ID = "20230311-05"

# Handle Signals
def sigterm_handler(_signo, _stack_frame):
	log.info("exiting on signal %d", _signo)
	sys.exit(0)	
signal.signal(signal.SIGINT, sigterm_handler)
signal.signal(signal.SIGHUP, sigterm_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

def sigusr1_handler(_signo, _stack_frame):
	log.info("received SIGUSR1; refreshing database")
	try:
		get_allmon_db()
	except Exception as e:
		log.error("unable to get allmondb: %s", e)
		if len(node_database) > 0:
			log.info("info fields will use cached data until an update succeeds")
		else:
			log.error("info fields will be labeled UNAVAILABLE until the data is retrieved")
signal.signal(signal.SIGUSR1, sigusr1_handler)
	

# Creating and connecting to the ASL manager socket

## Use this creator as part of a retry interval
def asl_create_connection_nofail():
	return asl_create_connection(False)

## Use this creator to fail immediately on any
## network-level connect failure
def asl_create_connection_fail():
	return asl_create_connection(True)

## If failhard=True then sys.exit() is called on network-level issues
def asl_create_connection(failhard):
	log.debug("asl_create_connection(failhard=%s)", failhard)
	try:
		nasl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		nasl.settimeout(10)
		log.debug("connect() using %s:%s", ASL_HOST, ASL_PORT)
		nasl.connect((ASL_HOST, ASL_PORT))

		# Check this connected to an Asterisk Call Manager (ACM)
		part = nasl.recv(1024).decode("UTF-8")
		log.debug("AIM version: %s", rern.sub("",part))

		if not re.match("^Asterisk Call Manager", part):
			log.error("Connection to %s:%d does not appear to be an Asterisk Call Manager", ASL_HOST, ASL_PORT)
			nasl.close()
			sys.exit(1)
	
		# Logon to the ACM
		logon = "ACTION: LOGIN\r\nUSERNAME: %s\r\nSECRET: %s\r\nEVENTS: 0\r\n" % ( ASL_USER, ASL_PASS )

		logon_response = asl_cmd_response(nasl, logon)
		log.debug(rern.sub(" ",logon_response))
		lp = re.compile('Response: Success\r\n', re.MULTILINE)
		logon_success = lp.match(logon_response)
		if not logon_success:
			lr = rern.sub("  ", logon_response)
			log.error("Logon failure msg=(%s)", lr)
			asl.close()
			sys.exit(1)

		log.debug("leaving asl_create_connection()")
		return nasl

	except socket.error as error:
		log.error("connection failed to %s:%s: %s", ASL_HOST, ASL_PORT, error)
		if failhard:
			sys.exit(1)
		else:
			return None
	except TypeError as e:
		log.error("failed connection on connect(): %s", e)

		if failhard:
			sys.exit(1)
		else:	
			return None


# Generic construct for sending ASL Manager commands and reading responses
def asl_cmd_response(s, cmd):
	try:
		aid = uuid.uuid4()
		cmd += "ActionID: %s\r\n\r\n" % aid
		s.settimeout(5)
		if not cmd is None:
			log.debug("command >> %s", rern.sub(" ", cmd))
			s.sendall(str.encode(cmd))
		
		cont_recv = True
		resp = ""
		while cont_recv:		
			part = s.recv(1024)
			if part == b'':
				log.debug("asl_cmd_response() socket went away on the far side")
				raise BrokenPipeError("other side went away")
			resp += part.decode("UTF-8")
			if resp[-4:] == "\r\n\r\n":
				cont_recv = False

		log.debug("response >> %s", rern.sub("  ", resp))
		return resp

	except TimeoutError as e:
		log.error("asl_cmd_response() TimeoutError")
		raise e
	except BrokenPipeError as e:
		log.error("asl_cmd_response() BrokenPipeError")
		raise e
	except socket.timeout as e:
		log.error("asl_cmd_response() socket.timeout")
		raise e
	except Exception as e:
		log.error("asl_cmd_response() Exception: %s", e.__class__)
		log.error("asl_cmd_response() Message: %s", e)
		raise e

# (try) to logout of ASL Manager neatly
def asl_logout(s):	
	try:
		s.sendall(str.encode("ACTION: Logoff\r\n\r\n"))
	except Exception as e:
		log.error(e)

# Parse the (String) response from a SawStat command
def parse_saw_stat(curr_node, response):
	log.debug("enter parse_saw_stat(%d)", curr_node)
	
	# Clear the CONNKEYED* status
	node_mon_list[curr_node].update( { "CONNKEYED" : False } )
	node_mon_list[curr_node].update( { "CONNKEYEDNODE" : False } )

	# Process the SawStat message
	ra = re.split(r'[\n\r]+', response)
	for l in ra:
		if re.match("^Conn", l):
			ce = re.split(r"\s+", l)
			# Conn: NODE PTT SEC_SINCE_KEY SEC_SINCE_UNKEY
			if ce[1] in node_mon_list[curr_node]["CONNS"]:
				node_mon_list[curr_node]["CONNS"][ce[1]].update( { "PTT" : ce[2] , "SSK" : ce[3] , "SSU" : ce[4] } )				
				if int(ce[2]) == 1:
					node_mon_list[curr_node].update( { "CONNKEYED" : True } )
					node_mon_list[curr_node].update( { "CONNKEYEDNODE" : ce[1] } )
	log.debug("exiting parse_saw_stat(%d)", curr_node)

# Query/Parse Echolink Node Info
def get_echolink_name(echolink_id):
	log.debug("enter get_echolink_name(%s)", echolink_id)
	elnodecmd = "ACTION: COMMAND\r\nCOMMAND: echolink dbget nodename %s\r\n" % (echolink_id)
	el_info = asl_cmd_response(asl, elnodecmd)
	ra = re.split(r'[\n\r]+', el_info)
	for l in ra:
		if re.match("^[0-9]+\|", l):
			ell = re.split(r'\|', l)
			log.debug("exiting get_echolink_name(%s)", echolink_id)
			return "%s - Echolink" % (ell[1])
	log.debug("Invalid response about echolink - exiting get_echolink_name")
	return "No Database Information"

# Parse the (String) response from XStat command
def parse_xstat(curr_node, response):
	log.debug("entering parse_xstat(%d)", curr_node)
	ra = re.split(r'[\n\r]+', response)
	conn_count = 0

	# {
	#	NODE : {
	#       IP : str            (ip adderss)
	#       DIR : str           (direction of link)
	#       CTIME: str          (connection time)
	#       CSTATE: str         (connection state)
	#       PTT : TRUE|FALSE    (current PTT state)
	#       SSK : int           (sec since key)
	#       SSU : int           (sec since unkey)
	#       MODE : str          (mode)
	#   } , 
	#	NODE { ... } ,
	#	... 
	# }
	node_conns = {}

	for l in ra:
		if re.match("^Conn", l):
			ce = re.split(r"\s+", l)
			node_conns.update( { ce[1] : {} } )
			# For each Conn: line, a node starting with 3 and seven digits long is an echolink	
			# node which is missing an IP entry. Treat everything else normally
			if re.match(r'^3[0-9]{6}$', ce[1]):
				node_conns[ce[1]].update( { "IP" : None , "DIR" : ce[3] , "CTIME" : ce[4] ,
					"CSTATE" : ce[5] , "PTT" : False, "SSK" : -1, "SSU" : -1, "MODE" : "Echolink"} )
				ename = get_echolink_name(ce[1][-6:])
				log.debug(ename)
				node_conns[ce[1]]["DESC"] = ename
			else:
				node_conns[ce[1]].update( { "IP" : ce[2] , "DIR" : ce[4] , "CTIME" : ce[5] ,
					"CSTATE" : ce[6] , "PTT" : False, "SSK" : -1, "SSU" : -1, "MODE" : "Local Monitor" } )
				if ce[1] in node_database:
					node_conns[ce[1]]["DESC"] = "{0} {1} {2}".format(node_database[ce[1]]['CALL'], 
						node_database[ce[1]]['DESC'], node_database[ce[1]]['LOC'])
				elif re.match(r'^.*\-P$', ce[1]):
					node_conns[ce[1]].update( { "DESC" : "Allstar Telephone Portal User",
						"MODE" : "Transceive" } )
				elif re.match(r'[A-Za-z]', ce[1]):
					node_conns[ce[1]].update( { "DESC" : "Direct Client" } )
				else:
					node_conns[ce[1]]["DESC"] = "Private or Unavailable"
				
			conn_count += 1
		elif re.match(r"^LinkedNodes:", l):
			for link in l.split(","):
				link = rens.sub("", link)			
				link = renol.sub("", link)
				if re.match(r"^[A-Z][0-9]+", link):
					ns = re.search(r'^([A-Z])([0-9]+)', link)
					if ns.group(2) in node_conns:
						if ns.group(1) == "T":
							node_conns[ns.group(2)].update( { "MODE" : "Transceive" } )
						elif ns.group(1) == "R":
							node_conns[ns.group(2)].update( { "MODE" : "Monitor" } )
						elif ns.group(1) == "C":
							node_conns[ns.group(2)].update( { "MODE" : "Connecting" } )
						else:
							node_conns[ns.group(2)].update( { "MODE" : "Unknown" } )
		elif re.match(r"^Var:\sRPT_TXKEYED=1", l):
			node_mon_list[curr_node].update( { "TXKEYED" : True } )
		elif re.match(r"^Var:\sRPT_TXEKEYED=1", l):
			node_mon_list[curr_node].update( { "TXEKEYED" : True } )
		elif re.match(r"^Var:\sRPT_RXKEYED=1", l):
			node_mon_list[curr_node].update( { "RXKEYED" : True } )
		elif re.match(r"^Var:\sRPT_TXKEYED=0", l):
			node_mon_list[curr_node].update( { "TXKEYED" : False } )
		elif re.match(r"^Var:\sRPT_TXEKEYED=0", l):
			node_mon_list[curr_node].update( { "TXEKEYED" : False } )
		elif re.match(r"^Var:\sRPT_RXKEYED=0", l):
			node_mon_list[curr_node].update( { "RXKEYED" : False } )

	if conn_count == 0:
		log.debug("no nodes connected")
	else:
		log.debug("processed %d connections", conn_count)

	node_mon_list[curr_node]["CONNS"] = node_conns
	log.debug("exiting parse_xstat(%d)", curr_node)

def gen_node_json_status(curr_node):
	log.debug("gen_node_json_status(%d)", curr_node)
	return json.dumps(node_mon_list[curr_node])

# Read and load in the ASL Database
def get_allmon_db():
	log.debug("entering get_allmon_db()")
	try:
		url = "http://allmondb.allstarlink.org/"
		req = urllib.request.Request(url, data=None, headers={ "User-Agent" : "Mozilla/5.0" })
		log.info("Retrieving database from %s", url)
		start_time = time.time()
		with urllib.request.urlopen(req) as response:
			dbf = response.read().decode("UTF-8")
	except Exception as e:
		raise e
	nodedb = re.split(r"\n", dbf)

	for ni in nodedb:
		r = re.split(r"\|", ni)
		if len(r) == 4:
			node_database.update( { str(r[0]) : {} } )
			node_database[str(r[0])].update( { "CALL" : r[1] , "DESC" : r[2] , "LOC" : r[3] } )
	elapsed_time = time.time() - start_time
	log.info("Updated node database in {0:.2f} seconds".format(elapsed_time))
	set_my_info()
	log.debug("exiting getAllMonDB()")

def set_my_info():
	log.debug("entering set_my_info()")
	for n in node_mon_list:
		if str(n) in node_database:
			node_mon_list[n]["DESC"] = "{0} {1} {2}".format(node_database[str(n)]['CALL'], 
			node_database[str(n)]['DESC'], node_database[str(n)]['LOC'])
		else:
			node_mon_list[n]["DESC"] = "Unavailable"
	log.debug("exiting set_my_info()")

######## MAIN PROGRAM ########

# Node database
# node_database = { NODE : { CALL : str , DESC : str , LOC : str } , ... }
node_database = { } 

# Node Status
# node_status = "ME" : int(n) , "DESC" : None , "RXKEYED" : False, "TXKEYED" : False ,
#                "TXEKEYED" : False, "CONNKEYED" : False, "CONNKEYEDNODE" : None , "CONNS" : None } 

# node_mon_list
# node_mon_list = { NODE : node_status{} , .... }
node_mon_list = { }

# Helpers
rern = re.compile(r'\r\n', re.MULTILINE)
rens = re.compile(r'\s', re.MULTILINE)
renol = re.compile(r'LinkedNodes:', re.MULTILINE)

# Args and Log Setup
ap = argparse.ArgumentParser(description="Connect to an ASL Asterisk server and print rpt stats")
ap.add_argument("node", type=int, help="Node ID")
ap.add_argument("config", help="path to INI configuration for the node")
ap.add_argument("--debug", help="enable debug-level logging output", action="store_true")
ap.add_argument("--version", help="get the version of the software", action="version", version='%(prog)s {}'.format(_BUILD_ID))
args = ap.parse_args()

log = logging.getLogger("asl-statmon")
lh = logging.StreamHandler()
lf = logging.Formatter(fmt="%(name)s: %(levelname)s: %(message)s")
lh.setFormatter(lf)
log.addHandler(lh)

if args.debug:
	log.setLevel(logging.DEBUG)
else:
	log.setLevel(logging.INFO)

if not 1000 <= args.node <= 9999999:
	log.error("provided node \"%s\" must be a number between 1000 and 9999999", args.node)
	sys.exit(1)
else:
	log.debug("using node %d", args.node)

# Parse configuration

try:
	if not os.path.exists(args.config):
		raise Exception("file not found: %s" % (args.config))
	log.debug("config file is %s", args.config)
	config = configparser.ConfigParser()
	config.read(args.config)
	log.debug({section: dict(config[section]) for section in config.sections()})

	if str(args.node) not in config:
		raise Exception("No configuration stanza for node %s in %s" % (args.node, args.config))

	if not "ip" in config[str(args.node)]:
		raise Exception("Missing required attribute ip= for %s in %s" % (args.node, args.config))
	ASL_HOST = config[str(args.node)]["ip"]
	log.debug("ASL_HOST - %s", ASL_HOST)

	if not "user" in config[str(args.node)]:
		raise Exception("Missing required attribute user= for %s in %s" % (args.node, args.config))
	ASL_USER = config[str(args.node)]["user"]
	log.debug("ASL_USER - %s", ASL_USER)

	if not "pass" in config[str(args.node)]:
		raise Exception("Missing required attribute pass= for %s in %s" % (args.node, args.config))
	ASL_PASS = config[str(args.node)]["pass"]
	log.debug("ASL_PASS - %s", ASL_PASS)

	if not "port" in config[str(args.node)]:
		log.debug("No port= attribute specified, using default 5038")
		ASL_PORT = 5038
	else:
		ASL_PORT = int(config[str(args.node)]["port"])
		log.debug("ASL_PORT - %s", ASL_PORT)

	if not "pollinterval" in config[str(args.node)]:
		log.info("No pollinterval= attribute specified, using default 1")
		POLLING_TIMER = 1
	else:
		POLLING_TIMER = int(config[str(args.node)]["pollinterval"])
		log.debug("POLLING_TIMER - %s", POLLING_TIMER)

	if not "retryinterval" in config[str(args.node)]:
		log.info("No retryinterval= attribute specified, using default 15s")
		RETRY_INTERVAL = 15
	else:
		RETRY_INTERVAL = int(config[str(args.node)]["retryinterval"])
		log.debug("RETRY_INTERVAL - %s", RETRY_INTERVAL)

	if not "retrycount" in config[str(args.node)]:
		log.info("No retrycount= attribute specified, using default of infinite retries")
		RETRY_COUNT = -1
	else:
		RETRY_COUNT = int(config[str(args.node)]["retrycount"])
		log.debug("RETRY_COUNT - %s", RETRY_COUNT)

	if not "monport" in config[str(args.node)]:
		raise Exception("Missing required attribute monport= for %s in %s" % (args.node, args.config))
	ZMQ_PORT = int(config[str(args.node)]["monport"])
	log.debug("ZMQ_PORT - %s", ZMQ_PORT)

	if "multinodes" in config[str(args.node)]:
		log.debug("found multinodes")
		for mn in re.split(r',', config[str(args.node)]["multinodes"]):
			log.debug("Adding node %d", int(mn))
			node_mon_list.update({ int(mn): {
				"ME" : int(mn) , "DESC" : None , "RXKEYED" : False, "TXKEYED" : False ,
				"TXEKEYED" : False, "CONNKEYED" : False, "CONNKEYEDNODE" : None , "CONNS" : None }})
	else:
		node_mon_list.update({ args.node : { 
				"ME" : args.node , "DESC" : None , "RXKEYED" : False, "TXKEYED" : False ,
				"TXEKEYED" : False, "CONNKEYED" : False, "CONNKEYEDNODE" : None , "CONNS" : None }})

except Exception as e:
	log.error("INI parser error: %s", e)
	raise e

# Create the initial connection to the ASL Manager
asl = asl_create_connection_fail()
log.debug("have original asl object")

# Create the ZeroMQ listener
try:
	log.debug("creating ZMQ listener")
	p_context = zmq.Context()
	publisher = p_context.socket(zmq.PUB)
	publisher.bind("tcp://*:%d" % (ZMQ_PORT))
except zmq.error.ZMQError as e:
	log.error("unable to create ZeroMQ listener: %s", e )
	asl_logout(asl)
	asl.close()
	sys.exit(1)

# Load the allmon database
try:
	get_allmon_db()
except Exception as e:
	log.error("unable to get allmondb: %s", e)
	log.error("info fields will be labeled UNAVAILABLE until the data is retrieve")


# Execute the main status gathering loop
log.debug("starting the main work loop")
main_loop = True
inner_loop = True
last_db_update = time.time()
try:
	while main_loop:
		while inner_loop:
			try:
				for c_node in node_mon_list:
					xstat_cmd = "ACTION: RptStatus\r\nCOMMAND: XStat\r\nNODE: %d\r\n" % ( c_node )
					sawstat_cmd = "ACTION: RptStatus\r\nCOMMAND: SawStat\r\nNODE: %d\r\n" % ( c_node )

					xstat = asl_cmd_response(asl, xstat_cmd)
					parse_xstat(c_node, xstat)
					sawstat = asl_cmd_response(asl, sawstat_cmd)
					parse_saw_stat(c_node, sawstat)
					publisher.send_multipart([str(c_node).encode("UTF-8"),
						gen_node_json_status(c_node).encode("UTF-8")])
	
			except BrokenPipeError as e:
				log.error("received BrokenPipeError; trying to reconnect")
				inner_loop = False
			except socket.timeout as e:
				log.error("received socket.timeout; trying to reconnect")
				inner_loop = False

			# Check and execute a database update if needed
			try:
				if ( time.time() - last_db_update ) > 3600:
					get_allmon_db()
					last_db_update = time.time()
			except Exception as e:
				log.error("unable to get allmondb: %s",e)
				if len(node_database) > 0:
					log.info("info fields will use cached data until an update succeeds")
				else:
					log.error("info fields will be labeled UNAVAILABLE until the data is retrieved")

			# Sleep for the polling time		
			sleep(POLLING_TIMER)
	
		# If we exited out of inner_loop without throwing an exception
		# then something went wrong with the asl socket. Loop around
		# here trying to reconnect for the timeout interval and then
		# let the main_loop continue
	
		asl.close()
		asl_dead = True
		retry_counter = 0
	
		while asl_dead:
			log.debug("sleeping for RETRY_INTERVAL of %d", RETRY_INTERVAL)
			sleep(RETRY_INTERVAL)
			retry_counter += 1
	
			if RETRY_COUNT == -1 or RETRY_COUNT <= retry_counter:
				log.debug("attempting reconnection retry #%d", retry_counter)

				asl = asl_create_connection_nofail()
				if asl:
					log.info("connection reestablished after %d retries", retry_counter)
					asl_dead = False
			else:
				log.error("count not reestablish connection after %d retries - exiting", retry_counter)
				sys.exit(1)
	
		# re-enable the innter loop processing	
		inner_loop = True

	# return back to the top of main_loop

except Exception as e:
	log.error(e)
	main_loop = False
	raise e

finally:
	log.debug("Clean up on aisle 5")
	asl_logout(asl)
	asl.close()
	publisher.close()

sys.exit(0)
